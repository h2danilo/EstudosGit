Comandos Básicos Git
========================

Definindo configuraçoes Globais do repositório:
>> git config --global user.name "Danilo"    (comando define usuario ao repositório)
>> git config --global user.email "h2danilo@hotmail.com"  	(comando define email ao repositório)
>> git config --global core.editor "code --wait" (comando define visual studio code como editor principal do Git)

>> git config --list (lista as configuraçoes no repositório)

>> git config user.name (lista qual usuario esta configurado no repositório)
>> git config user.email (lista qual email esta configurado no repositório)


Inicializando o Git no repositório
>> git init	(inicializa o Git na pasta, fazer parte do ecossistema do git)


>> git status	(mostra estado que esta o repositório no momento)
>> git add <nome arquivo>	(adiciona arquivo untracked(que nao esta ainda no git) no repositorio)
>> git add .	(adiciona todos arquivo untracked(que nao estao ainda no git) no repositorio)
>> git commit -m "<mensagem para referenciar o commit>"   (commit ira criar um snapshot dos arquivos que estao no Stage e o -m(mensagem) serve para identificar oq foi realizado nesse commit)
****qdo realizo o commit se der um git status nao ira ter nada, pois qdo comito faz um snap e o arquivo vai para o ciclo unmodified.
>> git commit -am "<mensagem para referenciar o commit>"	(para commitar direto sem precisar fazer o git add / **desde que o arquivo ja exista, se for arquivo novo essa opcao nao da certo)


Trabalhando com Log do Git:
>> git log	(lista os commit e historicos)
>> git log --decorate	(lista os commit e historicos mais completo)
>> git log --author="<nome_do_autor>"	(filtra os commit e historicos por autor)
>> git shortlog	(lista por ordem alfabetica os autores e qtos commit realizaram)
>> git shortlog -sn	(lista a qtde de commit que cada autor realizou)
>> git log --graph	(lista de forma grafica o historico dos commit)

>> git show <chave_do_commit>	(lista oq foi realizado no commit desejado)


Visualizando o DIFF:
>> git diff	(para visualizar oq foi modificado antes de fazer o gitt add e commitar //bom usar o git diff antes do commit para dar uma revisado do que foi feito.)
>> git diff --name-only (visualizar o nome dos arquivos que foram modificados antes de comitar)

Reverter alterações:
>> git checkout <nome_do_arquivo>	(reverter uma alteracao realizada antes de commitar)
>> git reset HEAD <nome_do_arquivo>	(se ja tiver feito git add, arquivo ja estiver no ciclo Stage e desejar cancelar as alterações / **qdo executa esse comando arquivo volta para o ciclo modified entao pode rodar o comando git checkout <nome_do_arquivo> para cancelar as alteracoes)
>> git reset --soft <chave_do_commit_para_qual_deseja_voltar>	(se ja realizou o commit mais deseja voltar estado anterior/ **soft volta ao estado anterior porem o arquivo volta no ciclo stage, pronto para commitar se realmente desejar cancelar alteracao realiza comandos acima) 
>> git reset --mixed <chave_do_commit_para_qual_deseja_voltar>	 (se ja realizou o commit mais deseja voltar estado anterior/ **mixed volta ao estado anterior porem o arquivo volta no modified, se realmente desejar cancelar alteracao realiza git checkout) 
>> git reset --hard <chave_do_commit_para_qual_deseja_voltar>	(se ja realizou o commit mais deseja voltar estado anterior/ **hard deleta td o commit, nao recomendavel utilizar esse comando)
 
 
Ligando Repositorio Local a um remoto:
>> git remote add origin https://github.com/h2danilo/EstudosGit.git	(vinculando uma conta repositorio Remoto, origin é um nome default para determinar que é a origem do repositorio remoto)
>> git push -u origin master	(envia todos arquivos que tenho local para repositorio remoto, master (nome do branch local) / origin("apelido" repositorio remoto))
